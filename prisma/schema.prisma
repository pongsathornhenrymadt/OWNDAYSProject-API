// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id Int @id @default(autoincrement())
  role String @default("USER")
  email String @unique //added
  name String?
  password String //added
  phoneNumber String? 
  orders Order[]
}

model Order{
  id Int @id @default(autoincrement())
  orderDate DateTime @default(now())
  //status String @default("PENDING")
  addressDetail String?
  province String?
  district String?
  subDistrict String?
  postalCode String?
  paymentMethod PaymentMethod @relation(fields: [paymentMethodId], references: [id])//
  paymentMethodId Int 
  employee Employee @relation(fields: [employeeId], references: [id])//
  employeeId Int
  user User @relation(fields: [userId], references: [id])//
  userId Int
  shippings Shipping[]
  orderStatusHistory OrderStatusHistory[] // need to be restructure
  orderDetails OrderDetail[]
}

model OrderDetail{
  id Int @id @default(autoincrement())
  product Product @relation(fields: [productId], references: [id])
  productId Int
  order Order @relation(fields: [orderId], references: [id])
  orderId Int
  quantity Int
  codeDiscount String? //added  
  discount Float? //added
}

model Product{
  id Int @id @default(autoincrement())
  productName String
  description String?
  price Float
  addons AddOns[]
  category Category @relation(fields: [categoryId], references: [id]) // added
  categoryId Int
  stock Stock? // added
  orderDetails OrderDetail[]
}

model AddOns{
  id Int @id @default(autoincrement())
  name String
  price Float
  product Product @relation(fields: [productId], references: [id])
  productId Int
}

model Category{
  id Int @id @default(autoincrement())
  name String
  product Product[] // one to many relationship
}

model Stock{
  id Int @id @default(autoincrement())
  quantity Int
  product Product @relation(fields: [productId], references: [id])
  productId Int @unique // one to one relationship
}

model PaymentMethod{
  id Int @id @default(autoincrement())
  method String
  order Order[] 
}

model Employee{
  id Int @id @default(autoincrement())
  name String
  orders Order[]
  shippings Shipping[]
}

model Shipping {
  id Int @id @default(autoincrement())
  courier String
  price Float
  order Order @relation(fields: [orderId], references: [id])
  orderId Int
  employee Employee @relation(fields: [employeeId], references: [id])
  employeeId Int
  shippingStatuses ShippingStatus[]
}

model ShippingStatus {
  id Int @id @default(autoincrement())
  status String
  updatedAt DateTime @default(now())
  shipping Shipping @relation(fields: [shippingId], references: [id])
  shippingId Int
}

model OrderStatusHistory{
  id Int @id @default(autoincrement())
  order Order @relation(fields: [orderId], references: [id])
  orderId Int
  status String
  createdAt DateTime @default(now())
}
